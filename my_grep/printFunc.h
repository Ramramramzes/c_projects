//* –¥–æ–±–∞–≤–ª—è–µ–º PRINTFUNC_H –≤ –ø—Ä–µ–¥–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä üõ†Ô∏è
#ifndef PRINTFUNC_H
#define PRINTFUNC_H
#include "regex.h"

void printFunc(int argc, char *argv[],int maxFileString,char *searchWord, Flags flags) {
  char **searchFiles = (char**)malloc(argc * sizeof(char*));
  for (int i = 0; i < argc; i++){
    FILE *file = fopen(argv[i],"r");
    if(file == NULL){
      printf("–§–∞–π–ª–∞ %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n",argv[i]);
      break;
    }else{
      //* –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
      regex_t regex;
      int regexFlags = flags.i ? REG_ICASE : 0;
      
      if (regcomp(&regex, searchWord, regexFlags) != 0) {
          fprintf(stderr, "–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n");
          exit(EXIT_FAILURE);
      }

      if(flags.n){
        maxFileString += 20;
      }

      char line[maxFileString];
      //todo –¥–æ–±–∞–≤–∏–º —Ç–∞–∫–æ–π –∂–µ while –¥–ª—è -v —Ç–æ–ª—å–∫–æ != 0
      int lineNum = 0;
      int lineCount = 0;
      // char **searchFiles = (char**)malloc(argc * sizeof(char*));
      if (flags.i && !flags.v) {
        regexFlags |= REG_ICASE;
        //* –ü–ª—é—Å—É–µ–º –µ—â–µ –∫ —Å—Ç—Ä–æ–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –∞ —Ç–æ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤—ã–≤–æ–¥
        while (fgets(line,maxFileString+strlen(argv[i]),file)){
          lineCount++;
          regmatch_t pmatch[1];
          if (regexec(&regex, line, 1, pmatch, 0) == 0) {
            //!  –î–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ —Ç—É—Ç –≤–æ–±—å—é –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 3 —Ä–∞–∑–∞ -i / -v / -iv / –±–µ–∑ -iv
            //* –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            lineNum++;
            printf("%d - –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ —Å–æ–≤–ø–∞–≤—à–∏—Ö\n",lineNum);
            //* –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è searchFiles;
            searchFiles[i] = argv[i];
            //* –í—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ —Å–æ–≤–ø–∞–ª–æ
            printf("%d: - –Ω–æ–º–µ—Ä —Å–æ–≤–ø–∞–≤—à–µ–π —Å—Ç—Ä–æ–∫–∏\n",lineCount);
          }
        }
      }
      
      if (flags.i && flags.v) {
        regexFlags |= REG_ICASE;
        //* –ü–ª—é—Å—É–µ–º –µ—â–µ –∫ —Å—Ç—Ä–æ–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –∞ —Ç–æ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤—ã–≤–æ–¥
        while (fgets(line,maxFileString+strlen(argv[i]),file)){
          regmatch_t pmatch[1];
          if (regexec(&regex, line, 1, pmatch, 0) != 0) {
              printf("%s:%s", argv[i], line);
          }
        }
      }

      //* –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
      printf("\n");

      //* –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
      fclose(file);
      //todo needArg[] - –º–∞—Å—Å–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏
      //todo flags - —Ñ–ª–∞–≥–∏
      //todo searchWord - —à–∞–±–ª–æ–Ω (–±–µ–∑ -–µ –ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞—é)


    // printf("<%d>",lineCount);//! lineCount - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª
    }
    //! –í—ã–≤–æ–¥ –∏–¥–µ—Ç –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
  }

  
  for (int i = 0; i < argc; i++){
    if(searchFiles[i] != NULL){
      printf("%s\n",searchFiles[i]);
    }
  }
}

#endif