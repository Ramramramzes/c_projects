//* –¥–æ–±–∞–≤–ª—è–µ–º FLAG_CHECKER_H –≤ –ø—Ä–µ–¥–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä üõ†Ô∏è
#ifndef FLAG_CHECKER_H
#define FLAG_CHECKER_H

//* –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–ª–∞–≥–æ–≤ 0 - 1
typedef struct{
  int e;
  char **eArgArr;
  int i;
  int v;
  int c;
  int l;
  int n;
  int h;
  int s;
  int f;
  int o;
  int eCounter;
} Flags;

//* –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–ª–∞–≥–æ–≤ 
char *wordsArr[] = {"e","i","v","c","l","n","h","s","f","o"};

//* –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—ã—Ö–æ–¥–µ –≤—ã–¥–∞—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ñ–ª–∞–≥–æ–≤
Flags flagChecker(int argc,char *argv[]){
  Flags flags = {0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0,0};
  //* –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–ª–∞–≥–æ–≤ üá∑üá∫
  int opt;
  int eLength = 0;
  for (int i = 0; i < argc; i++){
    if(strlen(argv[i]) == 2 && argv[i][0] == '-' && argv[i][1] == 'e'){
      eLength++;
    }
  }

  flags.eArgArr = (char**)calloc(eLength + 1, sizeof(char*));

  //* –î–≤–æ–µ—Ç–æ—á–∏–µ –≤–Ω–∞—á–∞–ª–µ —Ñ–ª–∞–≥–æ–≤ - —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º, —É–±–∏—Ä–∞–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö
  while ((opt = getopt(argc, argv, ":e:ivclnhsfo")) != -1) {
    switch(opt) {
      case 'e':
        flags.e = 1;
        flags.eArgArr[flags.eCounter] = optarg;
        flags.eCounter++;
        break;
      case 'i':
        flags.i = 1;
        break;
      case 'v':
        flags.v = 1;
        break;
      case 'c':
        flags.c = 1;
        break;
      case 'l':
        flags.l = 1;
        break;
      case 'n':
        flags.n = 1;
        break;
      case 'h':
        flags.h = 1;
        break;
      case 's':
        flags.s = 1;
        break;
      case 'f':
        flags.f = 1;
        break;
      case 'o':
        flags.o = 1;
        break;
      case '?':
        break;
    }
  }
  return flags;
}

#endif